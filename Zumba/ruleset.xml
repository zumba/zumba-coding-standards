<?xml version="1.0"?>
<ruleset name="Zumba">
	<description>Zumba Coding Standard</description>
	<exclude-pattern>Test/*</exclude-pattern>
	<exclude-pattern>tests/*</exclude-pattern>

	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>

	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

	<rule ref="Squiz.Commenting.DocCommentAlignment"/>
	<rule ref="Zumba.Commenting.VariableComment"/>
	<rule ref="Zumba.Commenting.FunctionComment"/>
	<rule ref="Squiz.Commenting.EmptyCatchComment"/>
	<rule ref="PEAR.Commenting.InlineComment"/>
	<!--<rule ref="Squiz.Commenting.FunctionCommentThrowTag"/> Need to implement namespace support -->
	<!--<rule ref="Generic.Commenting.Todo"/>-->

	<rule ref="PEAR.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<rule ref="Zumba.ControlStructures.MultiLineCondition"/>

	<rule ref="Zend.Files.ClosingTag"/>
	<rule ref="Generic.Files.LineEndings"/>

	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.NoSpaceAfterCast"/>
	<rule ref="Zumba.Formatting.SQL"/>

	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
	<rule ref="PEAR.NamingConventions.ValidClassName"/>
	<rule ref="Zumba.NamingConventions.ValidFunctionName"/>
	<rule ref="Zumba.NamingConventions.ValidVariableName"/>

	<rule ref="Squiz.Operators.ValidLogicalOperators"/>

	<!--<rule ref="Squiz.PHP.CommentedOutCode"/> Giving warnings to only PHPDoc comments -->
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Generic.PHP.NoSilencedErrors"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<rule ref="Squiz.Scope.MemberVarScope"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>

	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>

	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
	<!-- Excluded because it doesn't work with nullable types
	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
	-->
	<rule ref="Zumba.WhiteSpace.OperatorSpacing"/>

	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
</ruleset>
